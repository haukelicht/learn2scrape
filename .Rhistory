library(learn2scrape)
library(learn2scrape)
library(learnr)
run_tutorial(learn2scrape)
run_tutorial(scraping_epsa,package=learn2scrape)
library(learn2scrape)
?run_tutorial
library(learn2scrape)
run_tutorial(scraping_epsa,package=learn2scrape)
run_tutorial(scraping_epsa,package="learn2scrape")
run_tutorial("scraping_epsa",package="learn2scrape")
library(learn2scrape)
library(learn2scrape)
run_tutorial("scraping_epsa",package="learn2scrape")
library(learn2scrape)
run_tutorial("scraping_epsa",package="learn2scrape")
run_tutorial("hallo",package="learn2scrape")
run_tutorial("try",package="learn2scrape")
run_tutorial("scraping_epsa",package="learn2scrape")
library(learn2scrape)
run_tutorial("scraping_epsa",package="learn2scrape")
library(learn2scrape)
library(learn2scrape)
?install.packages
library(cowplot)
?plot_grid
knitr::opts_chunk$set(echo = F,
cache=F,
width.cutoff = 100,
warning=F,
warnings=F,
messages=F,message=F)
p_needed <- c("plyr", "dplyr", "quanteda","lubridate","stringr","ggplot2","car", "knitr", "kableExtra", "carData","tidyr", "stargazer", "broom", "zoo", "cowplot", "plm","coefplot")
lapply(p_needed,require,character.only=T)
party_names_at<-c("FPÖ","Greens","NEOS","ÖVP","Pilz","SPÖ")
party_names_de<-c("AfD","CDU","CSU","FDP","Greens","Left Party","SPD")
party_names_ch<-c("BDP","CVP","FDP","Greenliberals","Greens","SP","SVP")
names(party_names_at)<-c("fpo","gruene","neos","ovp","pilz","spo")
names(party_names_de)<-c("afd","cdu","csu","fdp","gruene","linke","spd")
names(party_names_ch)<-c("bdp","cvp","fdp_ch","greenliberals","greens_ch","sp","svp")
load("../data/scores_at.Rdata")
df_scores_at$time <- as.Date(paste0("20",df_scores_at$ym,"-01"), "%Y-%m-%d")
df_scores_at<-subset(df_scores_at,df_scores_at$time<as.Date("2018-03-31"))
at2<-df_scores_at %>% rename(party2=party)
at_plot<-ggplot(df_scores_at, aes(x=time, y=keyness_predicted, group=party, color=party))+
geom_smooth(data=at2,mapping=aes(x=time,y=keyness_predicted,group=party2),alpha=0.6,method="loess",color="gray",se=F,size=0.3)+
geom_smooth(aes(x=date,fill=party),method="loess")+
scale_x_date(name="Date", date_breaks = "year", date_labels="%Y")+
scale_y_continuous(name="Position on immigration") +
stat_summary(fun.y="mean",geom="point",aes(alpha=0.8),size=1)+
scale_color_manual(name="Party", values=c("cornflowerblue","seagreen","purple","black","red"))+
scale_fill_manual(values=c("cornflowerblue","seagreen","purple","black","red"))+
theme_minimal()+theme(legend.position="none") +
facet_wrap(~party,labeller=labeller(party=party_names_at),nrow=3)+
ggtitle("Austria")+
coord_cartesian(ylim=c(-1,1))+
geom_vline(aes(xintercept=as.Date("2015-08-01")),linetype="dashed")
load("../data/scores_de.Rdata")
df_scores_de$time <- as.Date(paste0("20",df_scores_de$ym,"-01"), "%Y-%m-%d")
df_scores_de<-subset(df_scores_de,df_scores_de$time<as.Date("2018-03-31"))
de2<-df_scores_de %>% rename(party2=party)
de_plot<-ggplot(df_scores_de, aes(x=time, y=keyness_predicted, group=party, color=party))+
geom_smooth(data=de2,mapping=aes(x=time,y=keyness_predicted,group=party2),alpha=0.6,method="loess",color="gray",se=F,size=0.3)+
geom_smooth(aes(x=date,fill=party),method="loess")+
scale_x_date(name="Date", date_breaks = "year", date_labels="%Y")+
scale_y_continuous(name="Position on immigration") +
stat_summary(fun.y="mean",geom="point",aes(alpha=0.8),size=1)+
scale_color_manual(name="Party", values=c("cornflowerblue","black","dimgray","gold","seagreen","purple","red"))+
scale_fill_manual(values=c("cornflowerblue","black","dimgray","gold","seagreen","purple","red"))+
theme_minimal()+theme(legend.position="none") +
facet_wrap(~party,labeller=labeller(party=party_names_de),nrow=3)+
ggtitle("Germany")+
coord_cartesian(ylim=c(-1.5,1))+
geom_vline(aes(xintercept=as.Date("2015-08-01")),linetype="dashed")
cowplot::plot_grid(at_plot,de_plot, labels = "AUTO",ncol=2,align="v",rel_width=c(1,2))
cowplot::plot_grid(at_plot,de_plot, labels = "AUTO",ncol=2,align="v",rel_widths=c(1,2))
cowplot::plot_grid(at_plot,de_plot, labels = "AUTO",ncol=2,align="v",rel_widths=c(1,1.5))
?scale_x_date
?html_table
read_html("https://en.wikipedia.org/wiki/List_of_tallest_buildings") %>% html_table()
library(rvest)
read_html("https://en.wikipedia.org/wiki/List_of_tallest_buildings") %>% html_table()
read_html("https://en.wikipedia.org/wiki/List_of_tallest_buildings") %>% html_table(fill=TRUE)
tables<-read_html("https://en.wikipedia.org/wiki/List_of_tallest_buildings") %>% html_table(fill=TRUE)
length(table)
length(tables)
class(tables)
tables[[20]]
tables[[19]]
tables[[1]]
tables[[2]]
ls()
(.packages())
run_tutorial("introduction",package="learn2scrape")
learnr::run_tutorial("introduction",package="learn2scrape")
(.packages())
